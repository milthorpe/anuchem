<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="Pumja Rasaayani" default="build" basedir=".">
    <property name="x10.testlib" location="${user.home}/x10-trunk/x10.tests/examples/x10lib"/>
    <property name="x10x.xlalib" location="../../x10x.lib/xla/src"/>
    <property name="anuchem" location="../../anu-chem"/>
    <property name="anuchem.src" location="${anuchem}/src"/>
    <property name="anuchem.lib" location="${anuchem}/lib/anu-chem.jar"/>
    <property name="bash.exe" value="bash"/>    
    <property name="optimize" value="true" />
    <property name="nochecks" value="false" />
    <property name="profile"  value="false" />
    <property name="inlineopt" value="false" />
    <property name="heapprofile" value="false" />

    <property name="gsl.include" location="/scratch/ganesh/gsl/include" />
    <property name="gsl.lib" location="/scratch/ganesh/gsl/lib" />

    <property name="usenativegsl" value="true" />

    <property name="x10c.postcompiler" value="g++" />
    <!-- <property name="x10c.postcompiler" value="mpicxx" /> -->

    <!-- <property name="x10rt" value="standalone" /> -->
    <property name="x10rt" value="pgas_sockets" />  
    <!-- <property name="x10rt" value="mpi" />  -->
    
    <property name="target" location="${basedir}/target" />
    <property name="target-src" location="${target}/classes" />
    <property name="target-test" location="${target}/test-classes" />
    <property name="bin" location="${basedir}/bin" />
    <property name="exe" value="pumjarasaayani.exe"/>
    <property name="jar" value="pumjarasaayani.jar"/>

    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}" />
    </condition>

    <condition property="x10c.nochecks" value="-NO_CHECKS=true" else="-BAD_PLACE_RUNTIME_CHECK=true -VERBOSE_CALLS">
        <istrue value="${nochecks}" />
    </condition>

    <condition property="post.profile" value="-pg" else="">
        <istrue value="${profile}" />
    </condition>
  
    <condition property="x10c.inlineopt" value="-INLINE_OPTIMIZATIONS=true" else="">
        <istrue value="${inlineopt}" />
    </condition>

    <condition property="post.heapprofile" value="-ltcmalloc" else="">
        <istrue value="${heapprofile}" />
    </condition>
    
    <condition property="post.usenativegsl" value="-I${gsl.include} # # -L${gsl.lib} -lgsl -lgslcblas" else="">
        <istrue value="${usenativegsl}" />
    </condition>

    <target name="init">
        <mkdir dir="${target}"/>
    </target>

    <target name="build" depends="dist"/>

    <target name="dist" depends="exe">
    </target>

    <target name="dist-java" depends="jar">
    </target>

    <target name="jar" depends="build-src-java">
        <mkdir dir="${bin}"/>
        <jar jarfile="${bin}/${jar}">
            <manifest>
                <attribute name="Main-Class" value="au.anu.edu.qm.PumjaRasaayani"/>
            </manifest>
            <fileset dir="${target-src}" includes="**/*.class" excludes="${jar}"/>          
        </jar>
    </target>

    <target name="exe" depends="build-src">
        <mkdir dir="${bin}"/>
        <copy file="${target}/classes/a.out" tofile="${bin}/pumjarasaayani.exe" />

        <exec executable="chmod" failonerror="true" dir="${bin}">
            <arg value="+x"/>
            <arg value="pumjarasaayani.exe"/>
        </exec>
    </target>

    <target name="build-src-java" depends="check-src" unless="src.uptodate">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target}/classes">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${src.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.nochecks} ${x10c.optimize} -sourcepath .:${x10x.xlalib}:${anuchem.src} -d ${target-src} ${src.list}"/>
        </exec>
    </target>

    <target name="build-src" depends="check-src,build-gsl-wrapper" unless="src.uptodate">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target}/classes">
                <mapper type="glob" from="*.x10" to="*.cc"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c++ -x10rt ${x10rt} -sourcepath .:${x10x.xlalib}:${anuchem.src} ${src.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/> 
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.nochecks} ${x10c.optimize} ${x10c.inlineopt} -report postcompile=1 -post '${x10c.postcompiler} -g ${post.profile} ${post.heapprofile} ${post.usenativegsl}' -sourcepath .:${x10x.xlalib}:${anuchem.src} -d ${target-src} ${src.list}"/>
        </exec>
    </target>

    <target name="init-src" depends="init">
        <mkdir dir="${target-src}"/>
	</target>

	<target name="check-src" depends="init-src">
        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate">
            <srcfiles refid="src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="check-src-gsl" depends="init-src">
        <fileset id="gsl.files" dir="${basedir}/src" includes="**/*.h,**/*.cc"/>
        <uptodate property="src.uptodate.gsl">
            <srcfiles refid="gsl.files"/>
            <globmapper from="*" to="${target-src}/*" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="build-gsl-wrapper" depends="check-src-gsl" unless="src.uptodate.gsl">
        <echo message="Building GSL wrapper"/>

        <copy todir="${target}/classes">
            <fileset id="cpp.files" dir="${basedir}/src" includes="**/*.h,**/*.cc"/>
        </copy>

        <exec executable="${bash.exe}" failonerror="true" dir="${target}/classes/org/gnu/gsl">
            <arg value="-c"/>
            <arg value="'gcc' -c GSL.cc -I${gsl.include}"/>
        </exec>
    </target>
    
    <target name="build-test" depends="check-test,build-harness" unless="test.uptodate">
        <echo message="Building tests"/>
        <fileset id="changed.test.files" dir="${basedir}/test" includes="**/*.x10">
            <depend targetdir="${target}/test-classes">
                <mapper type="glob" from="*.x10" to="*.cc"/>
            </depend>
        </fileset>

        <pathconvert property="test.list" refid="changed.test.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}test${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${test.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.nochecks} ${x10c.inlineopt} ${x10c.profile} ${x10c.optimize} -sourcepath ${x10.testlib}:${basedir}/src:.:${x10x.xlalib}:${anuchem.src} -classpath ${target-src} -d ${target-test} ${test.list}"/>
        </exec>
    </target>

    <target name="test" depends="check-test">
        <apply executable="runx10" failonerror="true" dir="${target-test}" relative="true" addsourcefile="false">
            <arg line="-t -v -mx 128M -classpath ${target-src}:${target-test}" />
            <targetfile/>

            <fileset dir="${target-test}" includes="**/Test*.cc" />
            <mapper type="glob" from="*.cc" to="*"/>
        </apply>
    </target>

	<target name="init-test" depends="init">
        <mkdir dir="${target-test}"/>
	</target>

	<target name="check-test" depends="init-test">
        <fileset id="test.files" dir="${basedir}/test" includes="**/*.x10"/>
        <uptodate property="test.uptodate">
            <srcfiles refid="test.files"/>
            <globmapper from="*.x10" to="${target-test}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>

	<target name="build-harness" depends="init-test,check-harness" unless="harness.uptodate">
        <echo message="Building test harness"/>
		<echo message="x10c ${test.list} ${x10.testlib}/harness/x10Test.x10"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.nochecks} ${x10c.inlineopt} ${x10c.profile} ${x10c.optimize} -sourcepath . -d ${target-test} ${x10.testlib}/harness/x10Test.x10"/>
        </exec>
    </target>

	<target name="check-harness" >
		<uptodate property="harness.uptodate">
			<srcfiles dir="${x10.testlib}" includes="harness/*.x10"/>
	 		<globmapper from="*.x10" to="${target-test}/*.cc" handledirsep="true"/>
		</uptodate>
    </target>

	<target name="clean">
		<delete dir="target" />
		<delete dir="bin" />
	</target>

</project>
