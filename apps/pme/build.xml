<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="Particle Mesh Ewald method" default="build" basedir=".">
    <property name="x10rt" value="sockets" />
    <property name="x10x.xla" location="../../xla"/>
	<property name="xla.props" location="${x10x.xla}/xla_${x10rt}.properties"/>
	<property name="xla.src" location="${x10x.xla}/src"/>
    <property name="anuchem" location="../../anu-chem"/>
    <property name="anuchem.props" location="${anuchem}/anuchem_${x10rt}.properties"/>
	<property name="anuchem.src" location="${anuchem}/src"/>
	<property name="anuchem.lib" location="${anuchem}/lib/anu-chem.jar"/>
    <property name="x10.testlib" location="${user.home}/x10-trunk/x10.tests/examples/x10lib"/>
    <property name="fftw" location="../../fftw_wrapper"/>
    <property name="fftw.props" location="${fftw}/fftw_${x10rt}.properties" />
    <property name="fftw3.include" location="${user.home}/fftw/include" />
    <property environment="env"/>
    <property name="bash.exe" value="bash"/>    
    <property name="optimize" value="true"/>
    <property name="nochecks" value="true"/>
    <property name="debug" value="false"/>
    <property name="profile"  value="false"/>
    <property name="cpuprofile"  value="false"/>
    <property name="workstealing"  value="false"/>
    <property name="perftoolsHome" location="${user.home}/perftools"/>
    <property name="mpiPprofile"  value="false"/>
    <property name="mpiPHome" location="${user.home}/mpiP"/>
    <property name="binutilsHome" location="${user.home}/binutils"/>
	<property name="target" location="${basedir}/target"/>
	<property name="target-src" location="${target}/classes"/>
	<property name="target-test" location="${target}/test-classes"/>
    <property name="bin" location="${basedir}/bin"/>
	<property name="exe" value="pme"/>
    <property name="testclass" value="test/au/edu/anu/pme/TestPME.x10"/>

    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}"/>
    </condition>

    <condition property="x10c.nochecks" value="-NO_CHECKS -VERBOSE_CHECKS=true"  else="-VERBOSE_CHECKS=true">
        <istrue value="${nochecks}"/>
    </condition>

    <condition property="x10c.debug" value="-DEBUG" else="">
        <istrue value="${debug}"/>
    </condition>

    <condition property="x10c.workstealing" value="-WORK_STEALING=true" else="">
        <istrue value="${workstealing}"/>
    </condition>

    <condition property="x10c.profile" value="-pg" else="">
        <istrue value="${profile}" />
    </condition>

    <condition property="x10c.cpuprofile" value="-gpt" else="">
        <istrue value="${cpuprofile}"/>
    </condition>

    <condition property="post.cpuprofile" value="-L${perftoolsHome}/lib" else="">
        <istrue value="${cpuprofile}"/>
    </condition>

    <condition property="link.mpiPprofile" value="-L${binutilsHome}/lib -L${mpiPHome}/lib -lmpiP -lbfd -liberty -lm" else="">
        <istrue value="${mpiPprofile}"/>
    </condition>

	<target name="init">
        <mkdir dir="${target}"/>
	</target>

    <target name="build" depends="exe"/>

    <target name="exe" depends="build-src-cpp">
        <mkdir dir="${bin}"/>
        <copy file="${target}/classes/a.out" tofile="${bin}/${exe}"/>

        <exec executable="chmod" failonerror="true" dir="${bin}">
            <arg value="+x"/>
            <arg value="${exe}"/>
        </exec>
    </target>

    <target name="build-src-java" depends="check-src-java" unless="src.uptodate.java">
        <echo message="Building source tree"/>

        <copy todir="${target}/classes">
            <fileset id="java.files" dir="${basedir}/src" includes="**/FFTW*.java"/>
        </copy>

        <echo message="x10c ${x10c.debug} ${x10c.optimize} ${x10c.nochecks} ${x10c.workstealing} -sourcepath '.${path.separator}${xla.src}${path.separator}${anuchem.src}' '${basedir}/${testclass}'"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.debug} ${x10c.optimize} ${x10c.nochecks} ${x10c.workstealing} -sourcepath '.${path.separator} ${path.separator}${xla.src}${path.separator}${anuchem.src}' -d '${target-src}' ${basedir}/${testclass}"/>
        </exec>
    </target>

    <target name="build-src-cpp" depends="check-src-cpp" unless="src.uptodate.cpp">
        <echo message="Building source tree"/>

        <echo message="x10c++ -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.debug} ${x10c.cpuprofile} ${x10c.profile} ${x10c.workstealing} -x10lib ${xla.props} -x10lib ${anuchem.props} -x10lib ${fftw.props} -sourcepath . '${basedir}/${testclass}'"/>

        <copy todir="${target}/classes">
            <fileset id="cpp.files" dir="${basedir}/src" includes="**/*.h,**/*.struct_h,**/*.cc"/>
        </copy>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.debug} ${x10c.cpuprofile} ${x10c.profile}  ${x10c.workstealing} -report postcompile=1 -post '# &quot;-I${fftw3.include}&quot; ${link.mpiPprofile} ${post.cpuprofile}' -x10lib ${xla.props} -x10lib ${anuchem.props} -x10lib ${fftw.props} -sourcepath . -d '${target-src}' '${basedir}/${testclass}'"/>
        </exec>
    </target>

	<target name="init-src" depends="init">
        <mkdir dir="${target-src}"/>
	</target>

	<target name="check-src-java" depends="init-src">
        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate.java">
            <srcfiles refid="src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.java" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="check-src-cpp" depends="init-src">
        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate.cpp">
            <srcfiles refid="src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>
    
    <target name="build-test" depends="check-test,build-harness" unless="test.uptodate">
        <echo message="Building tests"/>

        <fileset id="changed.test.files" dir="${basedir}/test" includes="**/*.x10">
            <depend targetdir="${target}/test-classes">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>

        <pathconvert property="test.list" refid="changed.test.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}test${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${test.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.optimize} -sourcepath '.${path.separator}${basedir}/src${path.separator}${xla.src}${path.separator}${anuchem.src}${path.separator}${x10.testlib}' -classpath '${xla.lib}${path.separator}${anuchem.lib}${path.separator}${target-src}' -commandlineonly -d '${target-test}' ${test.list}"/>
        </exec>
    </target>

    <target name="test" depends="build-src-java,build-test">
        <apply executable="x10" failonerror="true" dir="${target-test}" relative="true" addsourcefile="false">
            <arg line="-t -v -mx 128M -classpath ${xla.lib}:${anuchem.lib}:${target-src}:${target-test}"/>
            <targetfile/>

            <fileset dir="${target-test}" includes="**/Test*.java"/>
            <mapper type="glob" from="*.java" to="*"/>
        </apply>
    </target>

	<target name="init-test" depends="init">
        <mkdir dir="${target-test}"/>
	</target>

	<target name="check-test" depends="init-test">
        <fileset id="test.files" dir="${basedir}/test" includes="**/*.x10"/>
        <uptodate property="test.uptodate">
            <srcfiles refid="test.files"/>
            <globmapper from="*.x10" to="${target-test}/*.java" handledirsep="true"/>
        </uptodate>
    </target>

	<target name="build-harness" depends="init-test,check-harness" unless="harness.uptodate">
        <echo message="Building test harness"/>
		<echo message="x10c ${x10.testlib}/harness/x10Test.x10"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.optimize} -sourcepath . -commandlineonly -d '${target-test}' '${x10.testlib}/harness/x10Test.x10'"/>
        </exec>
    </target>

	<target name="check-harness" >
		<uptodate property="harness.uptodate">
			<srcfiles dir="${x10.testlib}" includes="harness/*.x10"/>
	 		<globmapper from="*.x10" to="${target-test}/*.java" handledirsep="true"/>
		</uptodate>
    </target>

	<target name="clean">
		<delete dir="target"/>
        <delete dir="bin"/>
	</target>

</project>
