// The following code was excised from TwoElectronIntegrals as it was unused

    /**
     * recursively form the columb repulsion term using HGP, stage one: form HRR 
     * HRR (Horizontal Recurrence Relation)
     */
    protected def contrHrr(a:Point3d, aPower:Power, aCoeff:ArrayList[Double],
                           aExps:ArrayList[Double], aNorms:ArrayList[Double],
                           b:Point3d, bPower:Power, bCoeff:ArrayList[Double],
                           bExps:ArrayList[Double], bNorms:ArrayList[Double],
                           c:Point3d, cPower:Power, cCoeff:ArrayList[Double],
                           cExps:ArrayList[Double], cNorms:ArrayList[Double],
                           d:Point3d, dPower:Power, dCoeff:ArrayList[Double],
                           dExps:ArrayList[Double], dNorms:ArrayList[Double]) : Double {
        val la = aPower.getL(), ma = aPower.getM(), na = aPower.getN();
        val lb = bPower.getL(), mb = bPower.getM(), nb = bPower.getN();
        val lc = cPower.getL(), mc = cPower.getM(), nc = cPower.getN();
        val ld = dPower.getL(), md = dPower.getM(), nd = dPower.getN();

        if (lb > 0) {
            val newBPower = Power(lb-1,mb,nb);
            return (contrHrr(a, Power(la+1,ma,na), aCoeff, aExps, aNorms, 
                             b, newBPower, bCoeff, bExps, bNorms,
                             c, cPower, cCoeff, cExps, cNorms,
                             d, dPower, dCoeff, dExps, dNorms)
                   + (a.i-b.i)
                     * contrHrr(a, aPower, aCoeff, aExps, aNorms,
                                b, newBPower, bCoeff, bExps, bNorms,
                                c, cPower, cCoeff, cExps, cNorms,
                                d, dPower, dCoeff, dExps, dNorms));
        } else if (mb > 0) {
            val newBPower = Power(lb,mb-1,nb);
            return (contrHrr(a, Power(la,ma+1,na), aCoeff, aExps, aNorms,
                             b, newBPower, bCoeff, bExps, bNorms,
                             c, cPower, cCoeff, cExps, cNorms,
                             d, dPower, dCoeff, dExps, dNorms)
                   + (a.j-b.j)
                     * contrHrr(a, aPower, aCoeff, aExps, aNorms,
                                b, newBPower, bCoeff, bExps, bNorms,
                                c, cPower, cCoeff, cExps, cNorms,
                                d, dPower, dCoeff, dExps, dNorms));
        } else if (nb > 0) {
            val newBPower = Power(lb,mb,nb-1);
            return (contrHrr(a, Power(la,ma,na+1), aCoeff, aExps, aNorms,
                             b, newBPower, bCoeff, bExps, bNorms,
                             c, cPower, cCoeff, cExps, cNorms,
                             d, dPower, dCoeff, dExps, dNorms)
                   + (a.k-b.k)
                     * contrHrr(a, aPower, aCoeff, aExps, aNorms,
                                b, newBPower, bCoeff, bExps, bNorms,
                                c, cPower, cCoeff, cExps, cNorms,
                                d, dPower, dCoeff, dExps, dNorms));
        } else if (ld > 0) {
            val newDPower = Power(ld-1,md,nd);
            return (contrHrr(a, aPower, aCoeff, aExps, aNorms, 
                             b, bPower, bCoeff, bExps, bNorms,
                             c, Power(lc+1,mc,nc), cCoeff, cExps, cNorms,
                             d, newDPower, dCoeff, dExps, dNorms)
                   + (c.i-d.i)
                     * contrHrr(a, aPower, aCoeff, aExps, aNorms, 
                                b, bPower, bCoeff, bExps, bNorms,
                                c, cPower, cCoeff, cExps, cNorms,
                                d, newDPower, dCoeff, dExps, dNorms));
        } else if (md > 0) {
            val newDPower = Power(ld,md-1,nd);
            return (contrHrr(a, aPower, aCoeff, aExps, aNorms,
                             b, bPower, bCoeff, bExps, bNorms,
                             c, Power(lc,mc+1,nc), cCoeff, cExps, cNorms,
                             d, newDPower, dCoeff, dExps, dNorms)
                   + (c.j-d.j)
                     * contrHrr(a, aPower, aCoeff, aExps, aNorms,
                                b, bPower, bCoeff, bExps, bNorms,
                                c, cPower, cCoeff, cExps, cNorms,
                                d, newDPower, dCoeff, dExps, dNorms));
        } else if (nd > 0) {
            val newDPower = Power(ld,md,nd-1);
            return (contrHrr(a, aPower, aCoeff, aExps, aNorms,
                             b, bPower, bCoeff, bExps, bNorms,
                             c, Power(lc,mc,nc+1), cCoeff, cExps, cNorms,
                             d, newDPower, dCoeff, dExps, dNorms)
                + (c.k-d.k)
                    * contrHrr(a, aPower, aCoeff, aExps, aNorms,
                               b, bPower, bCoeff, bExps, bNorms,
                               c, cPower, cCoeff, cExps, cNorms,
                               d, newDPower, dCoeff, dExps, dNorms));
        } // end if
        
        return contrVrr(a, aPower, aCoeff, aExps, aNorms,
                        b, bCoeff, bExps, bNorms,
                        c, cPower, cCoeff, cExps, cNorms,
                        d, dCoeff, dExps, dNorms);
    }

    /**
     * VRR (Vertical Recurrence Relation) contribution
     */
    protected def contrVrr(a:Point3d, aPower:Power, aCoeff:ArrayList[Double],
                           aExps:ArrayList[Double], aNorms:ArrayList[Double],
                           b:Point3d, bCoeff:ArrayList[Double],
                           bExps:ArrayList[Double], bNorms:ArrayList[Double],
                           c:Point3d, cPower:Power, cCoeff:ArrayList[Double],
                           cExps:ArrayList[Double], cNorms:ArrayList[Double],
                           d:Point3d, dCoeff:ArrayList[Double],
                           dExps:ArrayList[Double], dNorms:ArrayList[Double]) : Double {
        var res:Double = 0.0;

        var i:Int, j:Int, k:Int, l:Int;
        var iaExp:Double, iaCoef:Double, iaNorm:Double,
            jbExp:Double, jbCoef:Double, jbNorm:Double,
            kcExp:Double, kcCoef:Double, kcNorm:Double;
        
        for (i = 0; i < aExps.size(); i++) {
            iaCoef = aCoeff.get(i);
            iaExp = aExps.get(i);
            iaNorm = aNorms.get(i);

            for (j = 0; j < bExps.size(); j++) {
                jbCoef = bCoeff.get(j);
                jbExp = bExps.get(j);
                jbNorm = bNorms.get(j);

                for (k = 0; k < cExps.size(); k++) {
                    kcCoef = cCoeff.get(k);
                    kcExp = cExps.get(k);
                    kcNorm = cNorms.get(k);

                    for(l=0; l < dExps.size(); l++) {
                        res += iaCoef * jbCoef * kcCoef * dCoeff.get(l)
                                 * vrrWrapper(a, iaNorm, aPower, iaExp,
                                       b, jbNorm, jbExp,
                                       c, kcNorm, cPower, kcExp,
                                       d, dNorms.get(l), dExps.get(l), 0);
                    } // end for
                } // end for
            } // end for
        } // end for
        
        return res;
    }

    private static val SQRT2PI = Math.sqrt(2.0) * Math.pow(Math.PI, 1.25);

    /**
     * VRR (Vertical Recurrence Relation)
     */
    protected def vrrWrapper(
                         a:Point3d, aNorm:Double, aPower:Power, aAlpha:Double,
                         b:Point3d, bNorm:Double, bAlpha:Double,
                         c:Point3d, cNorm:Double, cPower:Power, cAlpha:Double,
                         d:Point3d, dNorm:Double, dAlpha:Double, m:Int) : Double {
        return vrr(a, aNorm, aPower, aAlpha, b, bNorm, bAlpha,
                   c, cNorm, cPower, cAlpha, d, dNorm, dAlpha, m);
    }

    /**
     * VRR (Vertical Recurrence Relation)
     */
    protected def vrr(a:Point3d, aNorm:Double, aPower:Power, aAlpha:Double,
                      b:Point3d, bNorm:Double, bAlpha:Double,
                      c:Point3d, cNorm:Double, cPower:Power, cAlpha:Double,
                      d:Point3d, dNorm:Double, dAlpha:Double, m:Int) : Double {
        var res:Double = 0.0;

        val p = gaussianProductCentre(aAlpha, a, bAlpha, b);
        val q = gaussianProductCentre(cAlpha, c, dAlpha, d);
        val zeta = aAlpha + bAlpha;
        val eta  = cAlpha + dAlpha;
        val zetaPlusEta = zeta + eta;
        val zetaByZetaPlusEta = zeta / zetaPlusEta;
        val etaByZetaPlusEta  = eta / zetaPlusEta;
        val w = gaussianProductCentre(zeta, p, eta, q);
        
        val la = aPower.getL();
        val ma = aPower.getM();
        val na = aPower.getN();
        val lc = cPower.getL();
        val mc = cPower.getM();
        val nc = cPower.getN();
        
        if (nc > 0) {
           val newCPower = Power(lc, mc, nc-1);
           res = (q.k-c.k)*vrr(a, aNorm, aPower, aAlpha,
                                         b, bNorm, bAlpha,
                                         c, cNorm, newCPower, cAlpha,
                                         d, dNorm, dAlpha, m)
               + (w.k-q.k)*vrr(a, aNorm, aPower, aAlpha,
                                         b, bNorm, bAlpha,
                                         c, cNorm, newCPower, cAlpha,
                                         d, dNorm, dAlpha, m+1);

           if (nc > 1) {
              val newCPower1 = Power(lc, mc, nc-2);
              res += 0.5*(nc-1) / eta*(vrr(a, aNorm, aPower, aAlpha,
                                           b, bNorm, bAlpha,
                                           c, cNorm, newCPower1, cAlpha,
                                           d, dNorm, dAlpha, m)
                    -zetaByZetaPlusEta*vrr(a, aNorm, aPower, aAlpha,
                                           b, bNorm, bAlpha,
                                           c, cNorm, newCPower1, cAlpha,
                                           d, dNorm, dAlpha, m+1));
           } // end if

           if (na > 0) {
              res += 0.5*na/zetaPlusEta*vrr(a, aNorm, Power(la, ma, na-1),
                                            aAlpha,
                                            b, bNorm, bAlpha,
                                            c, cNorm, newCPower,
                                            cAlpha,
                                            d, dNorm, dAlpha, m+1);
           } // end if

           return res;
        } else if (mc > 0) {
            val newCPower = Power(lc, mc-1, nc);
            res = (q.j-c.j)*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower, cAlpha,
                                          d, dNorm, dAlpha, m)
                + (w.j-q.j)*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower, cAlpha,
                                          d, dNorm, dAlpha, m+1);

            if (mc > 1) {
               val newCPower1 = Power(lc, mc-2, nc);
               res += 0.5*(mc-1)/eta*(vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower1, cAlpha,
                                          d, dNorm, dAlpha, m)
                   -zetaByZetaPlusEta*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower1, cAlpha,
                                          d, dNorm, dAlpha, m+1));
            } // end if

            if (ma > 0) {
                res += 0.5*ma/zetaPlusEta*vrr(a, aNorm, Power(la, ma-1, na),
                                              aAlpha,
                                              b, bNorm, bAlpha,
                                              c, cNorm, newCPower,
                                              cAlpha,
                                              d, dNorm, dAlpha, m+1);
            } // end if
            
            return res;
        } else if (lc > 0) {
            val newCPower = Power(lc-1, mc, nc);
            res = (q.i-c.i)*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower, cAlpha,
                                          d, dNorm, dAlpha, m)
                + (w.i-q.i)*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower, cAlpha,
                                          d, dNorm, dAlpha, m+1);

            if (lc > 1) {
               val newCPower1 = Power(lc-2, mc, nc);
               res += 0.5*(lc-1)/eta*(vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower1, cAlpha,
                                          d, dNorm, dAlpha, m)
                   -zetaByZetaPlusEta*vrr(a, aNorm, aPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, newCPower1, cAlpha,
                                          d, dNorm, dAlpha, m+1));
            } // end if

            if (la > 0) {
                res += 0.5*la/zetaPlusEta*vrr(a, aNorm, Power(la-1, ma, na),
                                              aAlpha,
                                              b, bNorm, bAlpha,
                                              c, cNorm, newCPower,
                                              cAlpha,
                                              d, dNorm, dAlpha, m+1);
            } // end if

            return res;
        } else if (na > 0) {
            val newAPower = Power(la, ma, na-1);
            res = (p.k-a.k)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, cPower, cAlpha,
                                          d, dNorm, dAlpha, m) 
                + (w.k-p.k)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, bNorm, bAlpha,
                                          c, cNorm, cPower, cAlpha,
                                          d, dNorm, dAlpha, m+1);

            if (na > 1) {
               val newAPower1 = Power(la, ma, na-2);
               res += 0.5*(na-1)/zeta*(vrr(a, aNorm, newAPower1, aAlpha,
                                           b, bNorm, bAlpha,
                                           c, cNorm, cPower, cAlpha,
                                           d, dNorm, dAlpha, m)
                     -etaByZetaPlusEta*vrr(a, aNorm, newAPower1, aAlpha,
                                           b, bNorm, bAlpha,
                                           c, cNorm, cPower, cAlpha,
                                           d, dNorm, dAlpha, m+1));
            } // end if

            return res;
        } else if (ma > 0) {
            val newAPower = Power(la, ma-1, na);
            res = (p.j-a.j)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, aNorm, aAlpha,
                                          c, aNorm, cPower, cAlpha,
                                          d, aNorm, dAlpha, m)
                + (w.j-p.j)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, aNorm, aAlpha,
                                          c, aNorm, cPower, cAlpha,
                                          d, aNorm, dAlpha, m+1);

            if (ma > 1) {
               val newAPower1 = Power(la, ma-2, na);
               res += 0.5*(ma-1)/zeta*(vrr(a, aNorm, newAPower1,
                                           aAlpha,
                                           b, aNorm, aAlpha,
                                           c, aNorm, cPower, cAlpha,
                                           d, aNorm, dAlpha, m)
                     -etaByZetaPlusEta*vrr(a, aNorm, newAPower1,
                                           aAlpha,
                                           b, aNorm, aAlpha,
                                           c, aNorm, cPower, cAlpha,
                                           d, aNorm, dAlpha, m+1));
            } // end if
            
            return res;
        } else if (la > 0) {
            val newAPower = Power(la-1, ma, na);
            res = (p.i-a.i)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, aNorm, aAlpha,
                                          c, aNorm, cPower, cAlpha,
                                          d, aNorm, dAlpha, m)
                + (w.i-p.i)*vrr(a, aNorm, newAPower, aAlpha,
                                          b, aNorm, aAlpha,
                                          c, aNorm, cPower, cAlpha,
                                          d, aNorm, dAlpha, m+1);

            if (la > 1) {
                val newAPower1 = Power(la-2, ma, na);
                res += 0.5*(la-1)/zeta*(vrr(a, aNorm, newAPower1, aAlpha,
                                            b, aNorm, aAlpha,
                                            c, aNorm, cPower, cAlpha,
                                            d, aNorm, dAlpha, m)
                      -etaByZetaPlusEta*vrr(a, aNorm, newAPower1, aAlpha,
                                            b, aNorm, aAlpha,
                                            c, aNorm, cPower, cAlpha,
                                            d, aNorm, dAlpha, m+1));
            } // end if
            
            return res;
        } // end if

        val rab2 = a.distanceSquared(b);
        val Kab  = SQRT2PI / zeta * Math.exp(-aAlpha*bAlpha / zeta*rab2);
        val rcd2 = c.distanceSquared(d);
        val Kcd  = SQRT2PI / eta * Math.exp(-cAlpha*dAlpha / eta*rcd2);
        val rpq2 = p.distanceSquared(q);
        val T    = zeta*eta / zetaPlusEta*rpq2;

        res = aNorm*bNorm*cNorm*dNorm*Kab*Kcd/Math.sqrt(zetaPlusEta)
              * IntegralsUtils.computeFGamma(m, T);
        return res;
    }

    /** Product of two gaussians */
    private static def gaussianProductCentre(alpha1:Double, a:Point3d,  
                                    alpha2:Double, b:Point3d) : Point3d {
        val gamma = alpha1 + alpha2;
        val centre = Point3d(
                         (alpha1 * a.i + alpha2 * b.i) / gamma,
                         (alpha1 * a.j + alpha2 * b.j) / gamma,
                         (alpha1 * a.k + alpha2 * b.k) / gamma
                       );

        return centre;
    }
