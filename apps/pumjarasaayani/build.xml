<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="Pumja Rasaayani" default="build" basedir=".">
    <property name="x10rt" value="sockets" />
    <property name="xla" location="../../xla"/>
    <property name="xla.props" location="${xla}/xla_${x10rt}.properties"/>
    <property name="x10.testlib" location="${user.home}/x10-trunk/x10.tests/examples/x10lib"/>
    <property name="anuchem" location="../../anu-chem"/>
    <property name="anuchem.src" location="${anuchem}/src"/>
    <property name="anuchem.props" location="${anuchem}/anuchem_${x10rt}.properties"/>
    <property name="gml.lib" location="${user.home}/x10-trunk/x10.gml/lib/native_gml.jar"/>
    <property name="gml.props" location="${user.home}/x10-trunk/x10.gml/native_gml.properties"/>
    <property name="papi" value="true" />
    <property name="x10papi" location="../../papi_wrapper"/>
    <property name="x10papi.props" location="${x10papi}/x10papi_${x10rt}.properties"/>
    <property name="papiHome" location="${user.home}/papi"/>
    <property name="bash.exe" value="bash"/>
    <property name="optimize" value="true" />
    <property name="nochecks" value="true" />
    <property name="debug" value="true"/>
    <property name="profile"  value="false" />
    <property name="cpuprofile"  value="false"/>
    <property name="perftoolsHome" location="${user.home}/perftools"/>
    <property name="heapprofile" value="false" />

    <property name="testclass" value="src/au/edu/anu/qm/PumjaRasaayani.x10" />

    <property name="gsl.include" location="${user.home}/gsl/include" />
    <property name="gsl.lib" location="${user.home}/gsl/lib" />

    <property name="target" location="${basedir}/target" />
    <property name="target-src" location="${target}/classes" />
    <property name="target-test" location="${target}/test-classes" />
    <property name="bin" location="${basedir}/bin" />
    <property name="exe" value="pumjarasaayani"/>
    <property name="jar" value="pumjarasaayani.jar"/>

    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}" />
    </condition>

    <condition property="x10c.nochecks" value="-NO_CHECKS -VERBOSE_CHECKS=true" else="-VERBOSE_CHECKS=true">
        <istrue value="${nochecks}" />
    </condition>

    <condition property="x10c.debug" value="-DEBUG" else="">
        <istrue value="${debug}"/>
    </condition>

    <condition property="x10c.profile" value="-pg" else="">
        <istrue value="${profile}" />
    </condition>

    <condition property="post.cpuprofile" value="-L${perftoolsHome}/lib -Wl,--no-as-needed -lprofiler -Wl,--as-needed" else="">
        <istrue value="${cpuprofile}"/>
    </condition>

    <condition property="x10lib.papi" value="-x10lib ${x10papi.props}" else="">
        <istrue value="${papi}"/>
    </condition>

    <condition property="post.papi" value="-L${papiHome}/lib -lpapi" else="">
        <istrue value="${papi}"/>
    </condition>


    <condition property="post.heapprofile" value="-ltcmalloc" else="">
        <istrue value="${heapprofile}" />
    </condition>
    
    <target name="init">
        <mkdir dir="${target}"/>
    </target>

    <target name="build" depends="dist"/>

    <target name="dist" depends="exe">
    </target>

    <target name="dist-java" depends="jar">
    </target>

    <target name="jar" depends="exe-java">
        <mkdir dir="${bin}"/>
        <jar jarfile="${bin}/${jar}">
            <manifest>
                <attribute name="Main-Class" value="au.edu.anu.qm.PumjaRasaayani"/>
            </manifest>
            <fileset dir="${target-src}" includes="**/*.class" excludes="${jar}"/>          
        </jar>
    </target>

    <target name="exe" depends="build-src-cpp">
        <mkdir dir="${bin}"/>
        <copy file="${target}/classes/a.out" tofile="${bin}/${exe}" />

        <exec executable="chmod" failonerror="true" dir="${bin}">
            <arg value="+x"/>
            <arg value="${exe}"/>
        </exec>
    </target>

    <target name="exe-java" depends="check-src" unless="src.uptodate">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target}/classes">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${src.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.nochecks} ${x10c.optimize} -x10lib ${gml.props} -x10lib ${xla.props} -x10lib ${anuchem.props} -sourcepath . -d ${target-src} '${basedir}/${testclass}'"/>
        </exec>
    </target>

    <target name="build-src-cpp" depends="check-src,build-cpp-wrappers" unless="src.uptodate">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target}/classes">
                <mapper type="glob" from="*.x10" to="*.cc"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c++ -x10rt ${x10rt} -classpath ${gml.lib} -x10lib ${gml.props} -x10lib ${xla.props} -x10lib ${anuchem.props} ${x10lib.papi} -sourcepath . ${basedir}/${testclass}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/> 
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.debug} ${x10c.profile} ${x10c.optimize} ${x10c.nochecks} -report postcompile=1 -classpath ${gml.lib} -x10lib ${gml.props} -x10lib ${xla.props} -x10lib ${anuchem.props} ${x10lib.papi} -sourcepath . -post '# # ${post.cpuprofile} ${post.heapprofile} ${post.papi} -L/usr/lib # -lblas -L/scratch/lapack -llapack -lpapi' -d ${target-src} ${basedir}/${testclass}"/>
        </exec>
    </target>

    <target name="init-src" depends="init">
        <mkdir dir="${target-src}"/>
	</target>

	<target name="check-src" depends="init-src">
        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate">
            <srcfiles refid="src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="check-src-gsl" depends="init-src">
        <fileset id="gsl.files" dir="${basedir}/src" includes="**/*.h,**/*.cc"/>
        <uptodate property="src.uptodate.gsl">
            <srcfiles refid="gsl.files"/>
            <globmapper from="*" to="${target-src}/*" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="build-cpp-wrappers" depends="check-src-gsl" unless="src.uptodate.gsl">
        <echo message="Building C++ wrappers"/>

        <copy todir="${target}/classes">
            <fileset id="cpp.files" dir="${basedir}/src" includes="**/*.h,**/*.cc"/>
        </copy>
    </target>
    
    <target name="build-test" depends="check-test,build-harness" unless="test.uptodate">
        <echo message="Building tests"/>
        <fileset id="changed.test.files" dir="${basedir}/test" includes="**/TestTwoElectronIntegrals.x10">
            <depend targetdir="${target}/test-classes">
                <mapper type="glob" from="*.x10" to="*.cc"/>
            </depend>
        </fileset>

        <pathconvert property="test.list" refid="changed.test.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}test${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${test.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.nochecks} ${x10c.optimize} -x10lib ${gml.props} -x10lib ${xla.props} -x10lib ${anuchem.props} -sourcepath ${x10.testlib}:${basedir}/src:. -classpath ${target-src} -d ${target-test} ${test.list}"/>
        </exec>
    </target>

    <target name="test" depends="build-test">
        <apply executable="runx10" failonerror="true" dir="${target-test}" relative="true" addsourcefile="false">
            <arg line="-t -v -mx 128M -classpath ${target-src}:${target-test}" />
            <targetfile/>

            <fileset dir="${target-test}" includes="**/Test*.cc" />
            <mapper type="glob" from="*.cc" to="*"/>
        </apply>
    </target>

	<target name="init-test" depends="init">
        <mkdir dir="${target-test}"/>
	</target>

	<target name="check-test" depends="init-test">
        <fileset id="test.files" dir="${basedir}/test" includes="**/*.x10"/>
        <uptodate property="test.uptodate">
            <srcfiles refid="test.files"/>
            <globmapper from="*.x10" to="${target-test}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>

	<target name="build-harness" depends="init-test,check-harness" unless="harness.uptodate">
        <echo message="Building test harness"/>
		<echo message="x10c ${x10.testlib}/harness/x10Test.x10"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.nochecks} ${x10c.optimize} -sourcepath . -d ${target-test} ${x10.testlib}/harness/x10Test.x10"/>
        </exec>
    </target>

	<target name="check-harness" >
		<uptodate property="harness.uptodate">
			<srcfiles dir="${x10.testlib}" includes="harness/*.x10"/>
	 		<globmapper from="*.x10" to="${target-test}/*.cc" handledirsep="true"/>
		</uptodate>
    </target>

	<target name="clean">
		<delete dir="target" />
		<delete dir="bin" />
	</target>

</project>
