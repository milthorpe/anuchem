<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="X10 Chemistry project" default="build" basedir=".">
    <property environment="env"/>
    <property name="x10rt" value="sockets"/>
    <property name="x10x.xla" location="../xla"/>
	<property name="xla.props" location="${x10x.xla}/xla_${x10rt}.properties"/>
    <property name="x10home" location="${env.X10HOME}" />
    <property name="x10.testlib" location="${user.home}/x10-trunk/x10.tests/examples/x10lib"/>
    <property name="bash.exe" value="bash"/>
    <property name="optimize" value="true" />
    <property name="nochecks" value="true" />
    <property name="workstealing" value="false" />
    <property name="debug" value="false"/>
    <property name="profile"  value="false"/>
    <property name="cpuprofile"  value="false"/>
    <property name="perftoolsHome" location="/scratch/perftools"/>
	<property name="target" location="${basedir}/target" />
	<property name="target-src" location="${target}/classes" />
	<property name="target-test" location="${target}/test-classes" />
	<property name="lib" location="${basedir}/lib" />
	<property name="jar" value="anu-chem.jar"/>
    <property name="x10lib-cpp" value="anuchem_${x10rt}" />
    <property name="bin" location="${basedir}/bin"/>
	<property name="exe" value="direct"/>
    <property name="testclass" value="test/au/edu/anu/chem/mm/TestDirectElectrostatic.x10"/>

    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}" />
    </condition>

    <condition property="x10c.workstealing" value="-WORK_STEALING" else="">
        <istrue value="${workstealing}" />
    </condition>

    <condition property="x10c.nochecks" value="-NO_CHECKS" else="">
        <istrue value="${nochecks}" />
    </condition>

    <condition property="x10c.debug" value="-DEBUG" else="">
        <istrue value="${debug}"/>
    </condition>

    <condition property="x10c.profile" value="-pg" else="">
        <istrue value="${profile}" />
    </condition>

    <condition property="post.cpuprofile" value="-L${perftoolsHome}/lib -lprofiler" else="">
        <istrue value="${cpuprofile}"/>
    </condition>

	<target name="init">
        <mkdir dir="${target}"/>
	</target>

    <target name="build" depends="dist"/>

    <target name="exe" depends="build-src-cpp">
        <mkdir dir="${bin}"/>
        <copy file="${target}/classes/a.out" tofile="${bin}/${exe}"/>

        <exec executable="chmod" failonerror="true" dir="${bin}">
            <arg value="+x"/>
            <arg value="${exe}"/>
        </exec>
    </target>

	<target name="dist" depends="init,buildx10lib-cpp">
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${target}" includes="${jar}"/>
        </copy>
    </target>

	<target name="jar" depends="build-src-java">
        <jar jarfile="${target}/${jar}">
            <fileset dir="${target-src}" includes="**/*.class" excludes="${jar}"/>
        </jar>
    </target>

    <target name="build-src-java" depends="check-src-java" unless="src.uptodate.java">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target-src}">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${src.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
	    <arg value="'x10c' ${x10c.optimize} ${x10c.workstealing} -x10lib ${xla.props}  -commandlineonly -d '${target-src}' ${src.list}"/>
        </exec>
    </target>

	<target name="init-src" depends="init">
        <mkdir dir="${target-src}"/>
	</target>

	<target name="check-src-java" depends="init-src">
        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate.java">
            <srcfiles refid="src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.java" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="build-src-cpp" depends="check-src-cpp" unless="src.uptodate.cpp">
        <echo message="Building source tree"/>

        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10">
            <depend targetdir="${target}/classes">
                <mapper type="glob" from="*.x10" to="*.cc"/>
            </depend>
        </fileset>

        <pathconvert property="src.list" refid="changed.src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c++ -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.workstealing} ${x10c.debug} ${x10c.profile} -x10lib ${xla.props} -sourcepath . '${basedir}/${testclass}'"/>

        <copy todir="${target}/classes">
            <fileset id="cpp.files" dir="${basedir}/src" includes="**/*.h,**/*.struct_h,**/*.cc"/>
        </copy>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.workstealing} ${x10c.debug} ${x10c.profile} -report postcompile=1 -post '# -g ${x10c.optimize} -funroll-loops # ${post.cpuprofile} #' -x10lib ${xla.props} -sourcepath . -d '${target-src}' '${basedir}/${testclass}'"/>
        </exec>
    </target>

    <target name="buildx10lib-cpp" depends="check-src-cpp" unless="src.uptodate.cpp">
        <echo message="Building source tree"/>
        <mkdir dir="include"/>
        <mkdir dir="lib"/>

        <fileset id="src.files" dir="${basedir}/src" includes="**/*.x10" />

        <pathconvert property="src.list" refid="src.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c++ -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.debug} ${x10c.profile} -x10lib ${xla.props} -sourcepath . -buildx10lib ../. ${src.list} -d ../include -o ${x10lib-cpp}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src">
            <arg value="-c"/>
            <arg value="'x10c++' -x10rt ${x10rt} ${x10c.optimize} ${x10c.nochecks} ${x10c.debug} ${x10c.profile} -report postcompile=1 -x10lib ${xla.props} -sourcepath . -buildx10lib ../. ${src.list} -d ../include -o ${x10lib-cpp}"/>
        </exec>

        <jar jarfile="${x10lib-cpp}.jar">
            <fileset dir="${basedir}/src" includes="**/*.x10" />
        </jar>
    </target>

    <target name="check-src-cpp" depends="init-src">
        <fileset id="changed.src.files" dir="${basedir}/src" includes="**/*.x10"/>
        <uptodate property="src.uptodate.cpp">
            <srcfiles refid="changed.src.files"/>
            <globmapper from="*.x10" to="${target-src}/*.cc" handledirsep="true"/>
        </uptodate>
    </target>
    
    <target name="build-test" depends="check-test,build-harness" unless="test.uptodate">
        <echo message="Building tests"/>

        <fileset id="changed.test.files" dir="${basedir}/test" includes="**/*.x10">
            <depend targetdir="${target}/test-classes">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>

        <pathconvert property="test.list" refid="changed.test.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}test${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c ${test.list}"/>

        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.optimize} -sourcepath '${x10.testlib}${path.separator}${basedir}/src${path.separator}.' -classpath '${target-src}' -commandlineonly -d '${target-test}' ${test.list}"/>
        </exec>
    </target>

    <target name="test" depends="build-test">
        <apply executable="x10" failonerror="true" dir="${target-test}" relative="true" addsourcefile="false">
            <arg line="-t -v -mx 128M -classpath '${target-src}${path.separator}${target-test}'" />
            <targetfile/>

            <fileset dir="${target-test}" includes="**/Test*.java" />
            <mapper type="glob" from="*.java" to="*"/>
        </apply>
    </target>

	<target name="init-test" depends="init">
        <mkdir dir="${target-test}"/>
	</target>

	<target name="check-test" depends="init-test">
        <fileset id="test.files" dir="${basedir}/test" includes="**/*.x10"/>
        <uptodate property="test.uptodate">
            <srcfiles refid="test.files"/>
            <globmapper from="*.x10" to="${target-test}/*.java" handledirsep="true"/>
        </uptodate>
    </target>

	<target name="build-harness" depends="init-test,check-harness" unless="harness.uptodate">
        <echo message="Building test harness"/>
		<echo message="x10c '${x10.testlib}/harness/x10Test.x10'"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/test">
            <arg value="-c"/>
            <arg value="'x10c' ${x10c.optimize} -sourcepath . -commandlineonly -d '${target-test}' '${x10.testlib}/harness/x10Test.x10'"/>
        </exec>
    </target>

	<target name="check-harness" >
		<uptodate property="harness.uptodate">
			<srcfiles dir="${x10.testlib}" includes="harness/*.x10"/>
	 		<globmapper from="*.x10" to="${target-test}/*.java" handledirsep="true"/>
		</uptodate>
    </target>

	<target name="clean">
        <delete file="${x10lib-cpp}.properties" />
        <delete file="${x10lib-cpp}.jar" />
		<delete dir="target" />
		<delete dir="include" />
		<delete dir="lib" />
	</target>

</project>
